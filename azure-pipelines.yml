trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - develop
  paths:
    include:
      - env/dev/**
      - env/qa/**
      - env/stg/**

jobs:
  - job: Deploy
    displayName: 'Deploy to Environments'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
      - script: |
          git fetch origin develop
          DEV_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/dev/' && echo true || echo false)
          QA_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/qa/' && echo true || echo false)
          STG_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/stg/' && echo true || echo false)

          echo "DEV_CHANGED=$DEV_CHANGED"
          echo "QA_CHANGED=$QA_CHANGED"
          echo "STG_CHANGED=$STG_CHANGED"

          if [ "$DEV_CHANGED" = "true" ]; then
            echo "Deploying to Dev..."
            cd env/dev
            terraform init
            terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
          fi

          if [ "$QA_CHANGED" = "true" ]; then
            echo "Deploying to QA..."
            cd env/qa
            terraform init
            terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
          fi

          if [ "$STG_CHANGED" = "true" ]; then
            echo "Deploying to Staging..."
            cd env/stg
            terraform init
            terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
          fi
        displayName: 'Deploy Terraform'
