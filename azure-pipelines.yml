trigger:
  branches:
    include:
      - develop  # Automatically triggers on commits to the develop branch

pr:
  branches:
    include:
      - develop  # Trigger the pipeline for pull requests to the develop branch

variables:
  - name: environmentVarGroup
    value: ''
      #- name: dynamodbLockTable
      #value: 'your-shared-lock-table'  # Your single DynamoDB lock table

stages:
  - stage: Deploy
    jobs:
      - job: DetermineEnvironments
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Get the list of modified files in the pull request
          - script: |
              echo "##vso[task.setvariable variable=changedPaths]$(git diff --name-only origin/develop HEAD)"
            displayName: 'Get changed files'

          # Set the environment variable based on changed paths
          - script: |
              environments=""
              if echo "$(changedPaths)" | grep -q "env/dev/"; then
                environments="dev"
              fi
              if echo "$(changedPaths)" | grep -q "env/qa/"; then
                environments="$environments stg"
              fi
              if echo "$(changedPaths)" | grep -q "env/stg/"; then
                environments="$environments "
              fi

              echo "Changed environments: $environments"
              echo "##vso[task.setvariable variable=deployEnvironments]$environments"
              
              # Set the variable group based on detected environments
              if [[ ! -z "$environments" ]]; then
                echo "##vso[task.setvariable variable=environmentVarGroup]iac-variables-${environments}"
              fi
            displayName: 'Determine Environments'

      - job: InitPlan
        dependsOn: DetermineEnvironments
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          - group: $(environmentVarGroup)  # Reference the environment-specific variable group

        steps:

          # Loop through each environment and deploy
          - script: |
              for env in $(deployEnvironments); do
                echo "Deploying to $env"

                # Set unique lock key based on environment
                #lock_key="${env}-lock"

                # Initialize Terraform with the shared DynamoDB table
                terraform init

                # Plan the Terraform deployment
                terraform plan

                # Apply the Terraform deployment
                #terraform apply -auto-approve tfplan
              done
            displayName: 'Deploy to All Detected Environments'
            env:
              AWS_ACCESS_KEY_ID: $(iam-key)  # Use environment variables directly
              AWS_SECRET_ACCESS_KEY: $(iam-secret)
