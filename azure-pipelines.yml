trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - develop
  paths:
    include:
      - env/dev/**
      - env/qa/**
      - env/stg/**

jobs:
  - job: CheckChanges
    displayName: 'Check for Changes'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
      - script: |
          git fetch origin develop  # Fetch the develop branch
          echo "Checking for changes in env/dev/"
          DEV_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/dev/' && echo true || echo false)
          echo "DEV_CHANGED=$DEV_CHANGED"
          echo "##vso[task.setvariable variable=DevChanged]$DEV_CHANGED"
          
          echo "Checking for changes in env/qa/"
          QA_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/qa/' && echo true || echo false)
          echo "QA_CHANGED=$QA_CHANGED"
          echo "##vso[task.setvariable variable=QAChanged]$QA_CHANGED"
          
          echo "Checking for changes in env/stg/"
          STG_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/stg/' && echo true || echo false)
          echo "STG_CHANGED=$STG_CHANGED"
          echo "##vso[task.setvariable variable=StgChanged]$STG_CHANGED"
        displayName: 'Check for Directory Changes'

  - job: DeployDev
    displayName: 'Deploy to Dev'
    condition: eq(variables['DevChanged'], 'true')
    variables:
      - group: dev-grp  # Reference to the variable group for Dev
    steps:
      - script: |
          cd env/dev
          terraform init
          terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
        displayName: 'Deploy Terraform for Dev'

  - job: DeployQA
    displayName: 'Deploy to QA'
    condition: eq(variables['QAChanged'], 'true')
    variables:
      - group: dev-grp  # Reference to the variable group for QA
    steps:
      - script: |
          cd env/qa
          terraform init
          terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
        displayName: 'Deploy Terraform for QA'

  - job: DeployStg
    displayName: 'Deploy to Staging'
    condition: eq(variables['StgChanged'], 'true')
    variables:
      - group: dev-grp  # Reference to the variable group for Staging
    steps:
      - script: |
          cd env/stg
          terraform init
          terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
        displayName: 'Deploy Terraform for Staging'
