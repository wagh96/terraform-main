trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - develop
  paths:
    include:
      - env/dev/**
      - env/qa/**
      - env/stg/**

jobs:
  - job: CheckChanges
    displayName: 'Check for Changes'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
      - script: |
          git fetch origin develop  # Fetch the develop branch
          echo "Checking for changes in env/dev/"
          DEV_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/dev/' && echo true || echo false)
          echo "DEV_CHANGED=$DEV_CHANGED"
          echo "##vso[task.setvariable variable=DevChanged;isOutput=true]$DEV_CHANGED"
          
          echo "Checking for changes in env/qa/"
          QA_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/qa/' && echo true || echo false)
          echo "QA_CHANGED=$QA_CHANGED"
          echo "##vso[task.setvariable variable=QAChanged;isOutput=true]$QA_CHANGED"
          
          echo "Checking for changes in env/stg/"
          STG_CHANGED=$(git diff --name-only origin/develop | grep -q 'env/stg/' && echo true || echo false)
          echo "STG_CHANGED=$STG_CHANGED"
          echo "##vso[task.setvariable variable=StgChanged;isOutput=true]$STG_CHANGED"
        displayName: 'Check for Directory Changes'

  - job: DeployDev
    displayName: 'Deploy to Dev'
    dependsOn: CheckChanges
    condition: eq(dependencies.CheckChanges.outputs['DevChanged'], 'true')
    steps:
      - script: |
          echo "DevChanged is: $(DevChanged)"  # Correctly reference the output variable
          if [ "$(DevChanged)" = "true" ]; then
            echo "Deploying to Dev..."
            cd env/dev
            terraform init
            terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
          else
            echo "No changes detected in env/dev/"
          fi
        displayName: 'Deploy Terraform for Dev'

  - job: DeployQA
    displayName: 'Deploy to QA'
    dependsOn: CheckChanges
    condition: eq(dependencies.CheckChanges.outputs['QAChanged'], 'true')
    steps:
      - script: |
          echo "QAChanged is: $(QAChanged)"
          if [ "$(QAChanged)" = "true" ]; then
            echo "Deploying to QA..."
            cd env/qa
            terraform init
            terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
          else
            echo "No changes detected in env/qa/"
          fi
        displayName: 'Deploy Terraform for QA'

  - job: DeployStg
    displayName: 'Deploy to Staging'
    dependsOn: CheckChanges
    condition: eq(dependencies.CheckChanges.outputs['StgChanged'], 'true')
    steps:
      - script: |
          echo "StgChanged is: $(StgChanged)"
          if [ "$(StgChanged)" = "true" ]; then
            echo "Deploying to Staging..."
            cd env/stg
            terraform init
            terraform apply -auto-approve -var="api_key=$(ApiKey)" -var="db_name=$(DbName)"
          else
            echo "No changes detected in env/stg/"
          fi
        displayName: 'Deploy Terraform for Staging'
